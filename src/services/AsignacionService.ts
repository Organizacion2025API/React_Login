import axios, { AxiosInstance } from 'axios';

const API_ADMIN_URL = 'https://gateway-api-dfbk.onrender.com/ApiAdministracion/api';

interface AsignacionEquipoDTO {
  id: number;
  personalId: number;
  equipoId: number;
  equipoNombre: string;
  equipoDescripcion: string;
  equipoModelo: string;
  equipoNserie: string;
}

interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

class AsignacionService {
  private apiClient: AxiosInstance;

  constructor() {
    this.apiClient = axios.create({
      baseURL: API_ADMIN_URL,
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000, // 10 segundos timeout
    });
  }

  setToken(token: string): void {
    console.log('üîç AsignacionService - Configurando token:', token ? 'Token presente' : 'No token');
    this.apiClient.defaults.headers.common.Authorization = `Bearer ${token}`;
    console.log('üîç AsignacionService - Headers despu√©s de configurar token:', this.apiClient.defaults.headers.common);
  }

  removeToken(): void {
    console.log('üîç AsignacionService - Removiendo token');
    delete this.apiClient.defaults.headers.common.Authorization;
  }

  async obtenerAsignaciones(): Promise<ApiResponse<AsignacionEquipoDTO[]>> {
    try {
      console.log('üîç AsignacionService - Haciendo petici√≥n a:', `${API_ADMIN_URL}/asignaciones`);
      const response = await this.apiClient.get('/asignaciones');
      console.log('üîç AsignacionService - Respuesta recibida:', response);
      
      if (response.status === 200) {
        console.log('‚úÖ AsignacionService - Datos obtenidos:', response.data);
        return {
          success: true,
          data: response.data
        };
      } else {
        console.log('‚ùå AsignacionService - Status no 200:', response.status);
        return {
          success: false,
          error: 'Error al obtener asignaciones'
        };
      }
    } catch (error: any) {
      console.error('‚ùå AsignacionService - Error en obtenerAsignaciones:', error);
      
      if (error.response) {
        console.error('‚ùå Error de respuesta del servidor:', error.response.data);
        return {
          success: false,
          error: error.response.data?.message || 'Error del servidor'
        };
      } else if (error.request) {
        console.error('‚ùå Error de red:', error.request);
        return {
          success: false,
          error: 'Error de conexi√≥n. Verifica tu internet.'
        };
      } else {
        console.error('‚ùå Error inesperado:', error.message);
        return {
          success: false,
          error: 'Error inesperado'
        };
      }
    }
  }

  async obtenerAsignacionesPorPersonal(personalId: number): Promise<ApiResponse<AsignacionEquipoDTO[]>> {
    try {
      console.log('üîç AsignacionService - obtenerAsignacionesPorPersonal para personalId:', personalId);
      
      // Intentar primero el endpoint espec√≠fico por personalId (m√°s eficiente)
      try {
        console.log('üîç AsignacionService - Intentando endpoint espec√≠fico:', `${API_ADMIN_URL}/asignaciones/personal/${personalId}`);
        const response = await this.apiClient.get(`/asignaciones/personal/${personalId}`);
        console.log('‚úÖ AsignacionService - Respuesta del endpoint espec√≠fico:', response.data);
        
        return {
          success: true,
          data: response.data
        };
      } catch (specificError: any) {
        console.log('‚ö†Ô∏è AsignacionService - Endpoint espec√≠fico no disponible, usando m√©todo general con filtro');
        
        // Si el endpoint espec√≠fico no existe, usar el m√©todo general con filtro
        const response = await this.obtenerAsignaciones();
        
        if (response.success && response.data) {
          console.log('üîç AsignacionService - Todas las asignaciones recibidas:', response.data);
          console.log('üîç AsignacionService - Filtrando por personalId:', personalId);
          
          // Filtrar las asignaciones por el ID del personal
          const asignacionesFiltradas = response.data.filter(
            asignacion => {
              console.log(`üîç Comparando: asignacion.personalId (${asignacion.personalId}) === personalId (${personalId})`);
              return asignacion.personalId === personalId;
            }
          );
          
          console.log('üîç AsignacionService - Asignaciones filtradas para personalId', personalId, ':', asignacionesFiltradas);
          console.log(`‚úÖ AsignacionService - Se encontraron ${asignacionesFiltradas.length} equipos para el usuario`);
          
          return {
            success: true,
            data: asignacionesFiltradas
          };
        } else {
          console.log('‚ùå AsignacionService - No se pudieron obtener asignaciones:', response.error);
          return response;
        }
      }
    } catch (error) {
      console.error('‚ùå AsignacionService - Error en obtenerAsignacionesPorPersonal:', error);
      return {
        success: false,
        error: 'Error al obtener asignaciones del personal'
      };
    }
  }

  async asignarEquipo(personalId: number, equipoId: number): Promise<ApiResponse<string>> {
    try {
      const response = await this.apiClient.post('/asignaciones', {
        personalId,
        equipoId
      });
      
      if (response.status === 201) {
        return {
          success: true,
          data: response.data
        };
      } else {
        return {
          success: false,
          error: 'Error al asignar equipo'
        };
      }
    } catch (error: any) {
      console.error('Error en asignarEquipo:', error);
      
      if (error.response) {
        return {
          success: false,
          error: error.response.data || 'Error del servidor'
        };
      } else if (error.request) {
        return {
          success: false,
          error: 'Error de conexi√≥n. Verifica tu internet.'
        };
      } else {
        return {
          success: false,
          error: 'Error inesperado'
        };
      }
    }
  }
}

export default new AsignacionService();
export type { AsignacionEquipoDTO };